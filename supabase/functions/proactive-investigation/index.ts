import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2.7.1';

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  console.log('üöÄ Proactive Investigation Edge Function called');
  
  if (req.method === 'OPTIONS') {
    console.log('‚úÖ Handling CORS preflight request');
    return new Response(null, { headers: corsHeaders });
  }

  try {
    console.log('üîß Initializing Supabase client...');
    const supabase = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_ANON_KEY') ?? ''
    );

    console.log('üì® Parsing request body...');
    const { questId, investigationType, context } = await req.json();
    
    console.log(`üîç D√©but d'investigation proactive IA pour qu√™te ${questId}`);
    console.log(`üìã Type d'investigation: ${investigationType}`);
    console.log(`üåç Contexte:`, context);
    
    const openAIApiKey = Deno.env.get('OPENAI_API_KEY');
    console.log(`üß† Utilisation OpenAI: ${openAIApiKey ? '‚úÖ Activ√©' : '‚ùå D√©sactiv√©'}`);

    if (!openAIApiKey) {
      console.warn('‚ö†Ô∏è Cl√© OpenAI manquante - utilisation de donn√©es simul√©es');
    }

    // R√©cup√©rer les donn√©es de la qu√™te et preuves existantes
    const questData = await getQuestData(supabase, questId);
    
    let result;

    switch (investigationType) {
      case 'search_historical_sources':
        result = await searchHistoricalSources(questData, context);
        break;
      case 'generate_theories':
        result = await generateTheories(questData, context);
        break;
      case 'find_missing_clues':
        result = await findMissingClues(questData, context);
        break;
      case 'cross_reference_data':
        result = await crossReferenceData(questData, context);
        break;
      case 'detect_anomalies':
        result = await detectAnomalies(questData, context);
        break;
      default:
        result = await fullInvestigation(questData, context);
    }

    console.log(`‚úÖ Investigation IA termin√©e avec ${result.findings?.length || result.theories?.length || result.clues?.length || 0} d√©couvertes`);

    return new Response(JSON.stringify({
      success: true,
      data: result,
      timestamp: new Date().toISOString(),
      aiPowered: !!openAIApiKey
    }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' }
    });

  } catch (error) {
    console.error('‚ùå Erreur investigation IA:', error);
    return new Response(JSON.stringify({
      success: false,
      error: error.message
    }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' }
    });
  }
});

// Fonction pour r√©cup√©rer les donn√©es de la qu√™te
async function getQuestData(supabase: any, questId: string) {
  console.log(`üìä R√©cup√©ration des donn√©es pour la qu√™te ${questId}`);
  
  const { data: quest, error: questError } = await supabase
    .from('treasure_quests')
    .select('*')
    .eq('id', questId)
    .single();

  if (questError) {
    console.error('‚ùå Erreur r√©cup√©ration qu√™te:', questError);
    throw new Error(`Impossible de r√©cup√©rer la qu√™te: ${questError.message}`);
  }

  const { data: evidence, error: evidenceError } = await supabase
    .from('quest_evidence')
    .select('*')
    .eq('quest_id', questId);

  if (evidenceError) {
    console.warn('‚ö†Ô∏è Erreur r√©cup√©ration preuves:', evidenceError);
  }

  const { data: theories, error: theoriesError } = await supabase
    .from('quest_theories')
    .select('*')
    .eq('quest_id', questId);

  if (theoriesError) {
    console.warn('‚ö†Ô∏è Erreur r√©cup√©ration th√©ories:', theoriesError);
  }

  const questData = {
    ...quest,
    evidence: evidence || [],
    theories: theories || []
  };

  console.log(`üìà Donn√©es r√©cup√©r√©es: ${evidence?.length || 0} preuves, ${theories?.length || 0} th√©ories`);
  
  return questData;
}

// Fonction pour appeler OpenAI
async function callOpenAI(prompt: string, systemMessage: string = "Tu es un expert arch√©ologue et historien qui analyse des qu√™tes de tr√©sors historiques.") {
  const openAIApiKey = Deno.env.get('OPENAI_API_KEY');
  
  if (!openAIApiKey) {
    console.warn('‚ö†Ô∏è OpenAI non disponible - g√©n√©ration de contenu simul√©');
    return null;
  }

  try {
    console.log('ü§ñ Appel OpenAI en cours...');
    
    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${openAIApiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'gpt-4o-mini',
        messages: [
          { role: 'system', content: systemMessage },
          { role: 'user', content: prompt }
        ],
        temperature: 0.7,
        max_tokens: 1500
      }),
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error('‚ùå Erreur OpenAI:', response.status, errorText);
      throw new Error(`Erreur OpenAI: ${response.status}`);
    }

    const data = await response.json();
    console.log('‚úÖ R√©ponse OpenAI re√ßue');
    
    return data.choices[0].message.content;
  } catch (error) {
    console.error('‚ùå Erreur appel OpenAI:', error);
    return null;
  }
}

async function searchHistoricalSources(questData: any, context: any) {
  console.log('üèõÔ∏è Recherche IA dans les sources historiques...');
  
  const prompt = `
Analyse cette qu√™te de tr√©sor et sugg√®re des sources historiques pertinentes √† rechercher:

QU√äTE: ${questData.title}
DESCRIPTION: ${questData.description}
P√âRIODE: ${questData.historical_period || 'Non sp√©cifi√©e'}
R√âGION: ${questData.region || 'Non sp√©cifi√©e'}

PREUVES EXISTANTES:
${questData.evidence.map((e: any) => `- ${e.title}: ${e.description}`).join('\n') || 'Aucune preuve'}

TH√âORIES EXISTANTES:
${questData.theories.map((t: any) => `- ${t.title}: ${t.description}`).join('\n') || 'Aucune th√©orie'}

G√©n√®re 3-5 sources historiques sp√©cifiques √† rechercher pour cette qu√™te, avec pour chacune:
- Le type de source (document, carte, photo, etc.)
- L'institution qui pourrait la poss√©der
- Le titre probable du document
- Pourquoi cette source serait pertinente
- Le niveau de priorit√© (1-5)

R√©ponds en JSON avec le format:
{
  "sources": [
    {
      "type": "document",
      "institution": "Archives...",
      "title": "Titre du document",
      "period": "1800-1850",
      "relevance": "Explication de la pertinence",
      "priority": 4,
      "credibility": 0.85
    }
  ]
}
`;

  const aiResponse = await callOpenAI(prompt);
  
  if (aiResponse) {
    try {
      const parsed = JSON.parse(aiResponse);
      console.log(`üéØ IA a trouv√© ${parsed.sources?.length || 0} sources historiques`);
      
      return {
        searchType: 'ai_historical_sources',
        findings: parsed.sources || [],
        aiGenerated: true,
        totalSources: 'Analyse IA',
        relevantSources: parsed.sources?.length || 0,
        searchCoverage: 'Bas√© sur analyse IA contextuelle',
        nextSteps: [
          'Contacter les institutions identifi√©es',
          'Valider l\'existence des documents',
          'Prioriser selon les niveaux sugg√©r√©s'
        ]
      };
    } catch (e) {
      console.error('‚ùå Erreur parsing r√©ponse IA sources:', e);
    }
  }

  // Fallback si IA indisponible
  const fallbackSources = [
    {
      type: 'document',
      institution: 'Archives D√©partementales',
      title: `Registre paroissial - ${questData.region || 'R√©gion'}`,
      period: questData.historical_period || 'XIXe si√®cle',
      relevance: 'Documents locaux souvent riches en d√©tails historiques',
      priority: 4,
      credibility: 0.85
    }
  ];

  return {
    searchType: 'fallback_sources',
    findings: fallbackSources,
    aiGenerated: false,
    totalSources: 'Donn√©es de base',
    relevantSources: 1,
    searchCoverage: 'Recherche basique',
    nextSteps: ['Activer l\'IA pour une recherche plus approfondie']
  };
}

async function generateTheories(questData: any, context: any) {
  console.log('üß† G√©n√©ration IA de th√©ories...');

  const prompt = `
Analyse cette qu√™te de tr√©sor et g√©n√®re des th√©ories innovantes bas√©es sur l'analyse des donn√©es:

QU√äTE: ${questData.title}
DESCRIPTION: ${questData.description}
P√âRIODE: ${questData.historical_period || 'Non sp√©cifi√©e'}
R√âGION: ${questData.region || 'Non sp√©cifi√©e'}

PREUVES DISPONIBLES:
${questData.evidence.map((e: any) => `- ${e.title}: ${e.description} (Validation: ${e.validation_status})`).join('\n') || 'Aucune preuve'}

TH√âORIES EXISTANTES:
${questData.theories.map((t: any) => `- ${t.title}: ${t.description}`).join('\n') || 'Aucune th√©orie'}

En tant qu'expert arch√©ologue, g√©n√®re 2-4 nouvelles th√©ories innovantes qui:
1. Explorent des angles non couverts par les th√©ories existantes
2. S'appuient sur les preuves disponibles
3. Sont plausibles historiquement
4. Proposent des pistes de recherche concr√®tes

Pour chaque th√©orie, fournis:
- Un titre accrocheur
- Le type (g√©ographique, historique, culturel, technique)
- Un niveau de confiance (0-1)
- Une description d√©taill√©e
- Les preuves qui la supportent
- Les actions sugg√©r√©es pour la valider

R√©ponds en JSON:
{
  "theories": [
    {
      "title": "Titre de la th√©orie",
      "type": "geographic",
      "confidence": 0.75,
      "description": "Description d√©taill√©e...",
      "supporting_evidence": ["Preuve 1", "Preuve 2"],
      "suggested_actions": ["Action 1", "Action 2"],
      "research_priority": "high"
    }
  ]
}
`;

  const aiResponse = await callOpenAI(prompt);
  
  if (aiResponse) {
    try {
      const parsed = JSON.parse(aiResponse);
      console.log(`üéØ IA a g√©n√©r√© ${parsed.theories?.length || 0} nouvelles th√©ories`);
      
      return {
        theoryType: 'ai_innovative_analysis',
        theories: parsed.theories || [],
        aiGenerated: true,
        analysisMethod: 'gpt_contextual_reasoning',
        confidenceLevel: parsed.theories?.reduce((acc: number, t: any) => acc + (t.confidence || 0), 0) / (parsed.theories?.length || 1),
        validationNeeded: true,
        expertReviewSuggested: true
      };
    } catch (e) {
      console.error('‚ùå Erreur parsing r√©ponse IA th√©ories:', e);
    }
  }

  // Fallback si IA indisponible
  const fallbackTheories = [
    {
      title: 'Analyse Required',
      type: 'system',
      confidence: 0.1,
      description: 'L\'IA est n√©cessaire pour g√©n√©rer des th√©ories contextuelles pertinentes',
      supporting_evidence: ['Donn√©es insuffisantes sans IA'],
      suggested_actions: ['Configurer OpenAI API'],
      research_priority: 'critical'
    }
  ];

  return {
    theoryType: 'fallback_limited',
    theories: fallbackTheories,
    aiGenerated: false,
    analysisMethod: 'basic_fallback',
    confidenceLevel: 0.1,
    validationNeeded: true,
    expertReviewSuggested: true
  };
}

async function findMissingClues(questData: any, context: any) {
  console.log('üîç Recherche IA d\'indices manquants...');

  const prompt = `
Analyse cette qu√™te de tr√©sor et identifie les indices cruciaux qui manquent pour r√©soudre l'√©nigme:

QU√äTE: ${questData.title}
DESCRIPTION: ${questData.description}
P√âRIODE: ${questData.historical_period || 'Non sp√©cifi√©e'}
R√âGION: ${questData.region || 'Non sp√©cifi√©e'}

PREUVES ACTUELLES:
${questData.evidence.map((e: any) => `- ${e.title} (${e.evidence_type}): ${e.description}`).join('\n') || 'Aucune preuve'}

TH√âORIES EXISTANTES:
${questData.theories.map((t: any) => `- ${t.title}: ${t.description}`).join('\n') || 'Aucune th√©orie'}

En tant qu'expert d√©tective historique, identifie 2-4 indices manquants cruciaux:
1. Analyse les patterns dans les preuves existantes
2. Identifie les lacunes logiques dans l'enqu√™te
3. Propose des types d'indices sp√©cifiques √† rechercher
4. √âvalue la probabilit√© de les trouver

Pour chaque indice manquant:
- Type (document, objet, lieu, t√©moin, etc.)
- Description pr√©cise de ce qu'il faut chercher
- O√π et comment le chercher
- Probabilit√© de le trouver (0-1)
- Impact potentiel sur la r√©solution

R√©ponds en JSON:
{
  "missing_clues": [
    {
      "type": "document",
      "title": "Titre de l'indice",
      "description": "Description d√©taill√©e",
      "search_location": "O√π chercher",
      "search_method": "Comment chercher",
      "probability": 0.8,
      "impact": "high",
      "expected_findings": ["R√©sultat 1", "R√©sultat 2"]
    }
  ]
}
`;

  const aiResponse = await callOpenAI(prompt);
  
  if (aiResponse) {
    try {
      const parsed = JSON.parse(aiResponse);
      console.log(`üéØ IA a identifi√© ${parsed.missing_clues?.length || 0} indices manquants`);
      
      return {
        missingClueType: 'ai_gap_analysis',
        clues: parsed.missing_clues || [],
        aiGenerated: true,
        analysisMethod: 'gpt_pattern_analysis',
        totalGaps: 'Analyse IA en cours',
        prioritizedGaps: parsed.missing_clues?.length || 0,
        completionRate: questData.evidence.length > 0 ? `${Math.min(90, questData.evidence.length * 20)}%` : '10%'
      };
    } catch (e) {
      console.error('‚ùå Erreur parsing r√©ponse IA indices:', e);
    }
  }

  // Fallback si IA indisponible
  const fallbackClues = [
    {
      type: 'system',
      title: 'Configuration IA Requise',
      description: 'L\'IA est n√©cessaire pour analyser les patterns et identifier les indices manquants',
      search_location: 'Configuration syst√®me',
      search_method: 'Activer OpenAI API',
      probability: 1.0,
      impact: 'critical',
      expected_findings: ['Analyse contextuelle', 'Identification des lacunes']
    }
  ];

  return {
    missingClueType: 'fallback_basic',
    clues: fallbackClues,
    aiGenerated: false,
    analysisMethod: 'basic_fallback',
    totalGaps: 'Inconnu sans IA',
    prioritizedGaps: 1,
    completionRate: '5%'
  };
}

async function crossReferenceData(questData: any, context: any) {
  console.log('üîó Cross-r√©f√©rencement IA des donn√©es...');

  const prompt = `
Effectue un cross-r√©f√©rencement intelligent des donn√©es de cette qu√™te:

QU√äTE: ${questData.title}
DESCRIPTION: ${questData.description}
P√âRIODE: ${questData.historical_period || 'Non sp√©cifi√©e'}
R√âGION: ${questData.region || 'Non sp√©cifi√©e'}

PREUVES ANALYS√âES:
${questData.evidence.map((e: any, i: number) => `${i+1}. ${e.title} (${e.evidence_type}):\n   Description: ${e.description}\n   Lieu: ${e.location_name || 'Non sp√©cifi√©'}\n   Status: ${e.validation_status}`).join('\n\n') || 'Aucune preuve'}

TH√âORIES EXISTANTES:
${questData.theories.map((t: any, i: number) => `${i+1}. ${t.title}:\n   ${t.description}`).join('\n\n') || 'Aucune th√©orie'}

En tant qu'expert en analyse de donn√©es historiques:
1. Identifie les corr√©lations entre les diff√©rentes preuves
2. Trouve des patterns g√©ographiques, temporels ou th√©matiques
3. Identifie les contradictions ou incoh√©rences
4. Sugg√®re des liens avec des √©v√©nements historiques connus
5. √âvalue la force de chaque corr√©lation

R√©ponds en JSON:
{
  "correlations": [
    {
      "type": "temporal/geographic/thematic/cultural",
      "strength": 0.85,
      "description": "Description de la corr√©lation",
      "involved_elements": ["Preuve 1", "Preuve 2"],
      "historical_context": "Contexte historique",
      "significance": "Importance de cette corr√©lation"
    }
  ],
  "contradictions": [
    {
      "description": "Description de la contradiction",
      "elements": ["√âl√©ment A", "√âl√©ment B"],
      "possible_explanations": ["Explication 1", "Explication 2"]
    }
  ]
}
`;

  const aiResponse = await callOpenAI(prompt);
  
  if (aiResponse) {
    try {
      const parsed = JSON.parse(aiResponse);
      console.log(`üéØ IA a trouv√© ${parsed.correlations?.length || 0} corr√©lations`);
      
      const avgStrength = parsed.correlations?.reduce((acc: number, c: any) => acc + (c.strength || 0), 0) / (parsed.correlations?.length || 1);
      
      return {
        correlationType: 'ai_intelligent_analysis',
        correlations: parsed.correlations || [],
        contradictions: parsed.contradictions || [],
        aiGenerated: true,
        reliabilityScore: avgStrength || 0.5,
        dataQuality: questData.evidence.length > 2 ? 'sufficient' : 'limited',
        recommendedValidation: 'expert_review_and_field_verification'
      };
    } catch (e) {
      console.error('‚ùå Erreur parsing r√©ponse IA corr√©lations:', e);
    }
  }

  // Fallback si IA indisponible
  const fallbackCorrelations = [
    {
      type: 'system_limitation',
      strength: 0.1,
      description: 'Cross-r√©f√©rencement manuel limit√© sans IA',
      involved_elements: ['Syst√®me'],
      historical_context: 'Configuration requise',
      significance: 'L\'IA permettrait une analyse approfondie des patterns'
    }
  ];

  return {
    correlationType: 'fallback_basic',
    correlations: fallbackCorrelations,
    contradictions: [],
    aiGenerated: false,
    reliabilityScore: 0.1,
    dataQuality: 'insufficient_without_ai',
    recommendedValidation: 'enable_ai_analysis'
  };
}

async function detectAnomalies(questData: any, context: any) {
  console.log('‚ö†Ô∏è D√©tection IA d\'anomalies...');

  const prompt = `
Analyse ces donn√©es de qu√™te et d√©tecte toutes les anomalies, incoh√©rences ou √©l√©ments suspects:

QU√äTE: ${questData.title}
DESCRIPTION: ${questData.description}
P√âRIODE: ${questData.historical_period || 'Non sp√©cifi√©e'}
R√âGION: ${questData.region || 'Non sp√©cifi√©e'}

PREUVES √Ä ANALYSER:
${questData.evidence.map((e: any, i: number) => `${i+1}. ${e.title} (${e.evidence_type}):\n   Description: ${e.description}\n   Localisation: ${e.location_name || 'Non sp√©cifi√©e'}\n   Coordonn√©es: ${e.latitude ? `${e.latitude}, ${e.longitude}` : 'Non sp√©cifi√©es'}\n   P√©riode estim√©e: ${e.estimated_period || 'Non dat√©e'}\n   Validation: ${e.validation_status}`).join('\n\n') || 'Aucune preuve'}

TH√âORIES EXISTANTES:
${questData.theories.map((t: any, i: number) => `${i+1}. ${t.title}: ${t.description}`).join('\n\n') || 'Aucune th√©orie'}

En tant qu'expert d√©tective historique, identifie toutes les anomalies possibles:
1. CHRONOLOGIQUES: √©l√©ments dat√©s de mani√®re incoh√©rente
2. G√âOGRAPHIQUES: distributions spatiales suspectes
3. CULTURELLES: √©l√©ments qui ne correspondent pas au contexte
4. LOGIQUES: contradictions dans les preuves
5. TECHNIQUES: probl√®mes de validation ou de cr√©dibilit√©

Pour chaque anomalie d√©tect√©e:
- Type et s√©v√©rit√© (low/medium/high/critical)
- Description pr√©cise
- √âl√©ments impliqu√©s
- Explications possibles
- Actions recommand√©es

R√©ponds en JSON:
{
  "anomalies": [
    {
      "type": "chronological/geographic/cultural/logical/technical",
      "severity": "high",
      "description": "Description de l'anomalie",
      "involved_elements": ["√âl√©ment 1", "√âl√©ment 2"],
      "confidence": 0.85,
      "possible_explanations": ["Explication 1", "Explication 2"],
      "recommended_actions": ["Action 1", "Action 2"]
    }
  ]
}
`;

  const aiResponse = await callOpenAI(prompt);
  
  if (aiResponse) {
    try {
      const parsed = JSON.parse(aiResponse);
      console.log(`üéØ IA a d√©tect√© ${parsed.anomalies?.length || 0} anomalies`);
      
      const maxSeverity = parsed.anomalies?.reduce((max: string, a: any) => {
        const severityLevels = { low: 1, medium: 2, high: 3, critical: 4 };
        const currentLevel = severityLevels[a.severity as keyof typeof severityLevels] || 1;
        const maxLevel = severityLevels[max as keyof typeof severityLevels] || 1;
        return currentLevel > maxLevel ? a.severity : max;
      }, 'low') || 'low';
      
      return {
        anomalyType: 'ai_comprehensive_analysis',
        anomalies: parsed.anomalies || [],
        aiGenerated: true,
        totalDataPoints: questData.evidence.length + questData.theories.length,
        anomalousDataPoints: parsed.anomalies?.length || 0,
        alertLevel: maxSeverity,
        requiresExpertReview: parsed.anomalies?.some((a: any) => ['high', 'critical'].includes(a.severity)) || false
      };
    } catch (e) {
      console.error('‚ùå Erreur parsing r√©ponse IA anomalies:', e);
    }
  }

  // Fallback si IA indisponible
  const fallbackAnomalies = [
    {
      type: 'system',
      severity: 'high',
      description: 'Impossible de d√©tecter les anomalies sans analyse IA',
      involved_elements: ['Syst√®me d\'analyse'],
      confidence: 1.0,
      possible_explanations: ['Configuration OpenAI manquante'],
      recommended_actions: ['Configurer l\'API OpenAI', 'Relancer l\'analyse']
    }
  ];

  return {
    anomalyType: 'fallback_system_alert',
    anomalies: fallbackAnomalies,
    aiGenerated: false,
    totalDataPoints: questData.evidence.length + questData.theories.length,
    anomalousDataPoints: 1,
    alertLevel: 'high',
    requiresExpertReview: true
  };
}

async function fullInvestigation(questData: any, context: any) {
  console.log('üî¨ Investigation IA compl√®te en cours...');

  console.log('üìä Lancement des analyses parall√®les...');
  
  const [sources, theories, clues, correlations, anomalies] = await Promise.all([
    searchHistoricalSources(questData, context),
    generateTheories(questData, context),
    findMissingClues(questData, context),
    crossReferenceData(questData, context),
    detectAnomalies(questData, context)
  ]);

  console.log('üîÑ Synth√®se des r√©sultats...');

  // Calcul de la confiance globale bas√©e sur l'IA
  const confidenceScores = [
    theories.confidenceLevel || 0.5,
    correlations.reliabilityScore || 0.5,
    sources.relevantSources ? Math.min(1, sources.relevantSources / 5) : 0.3,
    clues.prioritizedGaps ? Math.min(1, clues.prioritizedGaps / 3) : 0.4,
    anomalies.anomalousDataPoints === 0 ? 0.9 : Math.max(0.3, 1 - (anomalies.anomalousDataPoints * 0.2))
  ];
  
  const overallConfidence = confidenceScores.reduce((acc, score) => acc + score, 0) / confidenceScores.length;

  const aiPowered = sources.aiGenerated || theories.aiGenerated || clues.aiGenerated || correlations.aiGenerated || anomalies.aiGenerated;

  console.log(`‚úÖ Investigation compl√®te termin√©e - Confiance: ${(overallConfidence * 100).toFixed(1)}% (IA: ${aiPowered ? 'Activ√©e' : 'D√©sactiv√©e'})`);

  return {
    investigationType: aiPowered ? 'comprehensive_ai_powered' : 'comprehensive_basic',
    results: {
      historicalSources: sources,
      generatedTheories: theories,
      missingClues: clues,
      dataCorrelations: correlations,
      detectedAnomalies: anomalies
    },
    overallConfidence: Math.round(overallConfidence * 100) / 100,
    aiPowered,
    recommendedNextSteps: aiPowered ? [
      'Valider les th√©ories IA sur le terrain',
      'Rechercher les sources historiques identifi√©es',
      'Investiguer les indices manquants prioritaires',
      'R√©soudre les anomalies d√©tect√©es',
      'Approfondir les corr√©lations prometteuses'
    ] : [
      'Configurer l\'IA OpenAI pour une analyse approfondie',
      'Relancer l\'investigation avec l\'IA activ√©e',
      'Consulter un expert pour l\'analyse manuelle'
    ],
    estimatedTimeToCompletion: aiPowered ? '2-4 semaines' : 'Ind√©termin√© sans IA',
    expertiseRequired: aiPowered ? ['Validation terrain', 'Recherche archivistique'] : ['Configuration IA', 'Expertise manuelle compl√®te']
  };
}