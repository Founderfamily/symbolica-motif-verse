
import { supabase } from '@/integrations/supabase/client';
import { historicalQuests } from '@/data/historicalQuests';

interface ServiceResponse<T = any> {
  success: boolean;
  message: string;
  data?: T;
  error?: string;
}

export const historicalQuestService = {
  async populateHistoricalQuests(forceReload: boolean = false): Promise<ServiceResponse> {
    try {
      console.log('üîÑ Starting to populate historical quests...');
      console.log('üìä Total quests in historicalQuests.ts:', historicalQuests.length);
      
      // Check if quests already exist
      const { data: existingQuests, error: checkError } = await supabase
        .from('treasure_quests')
        .select('title')
        .order('created_at', { ascending: false });
      
      if (checkError) {
        console.error('‚ùå Error checking existing quests:', checkError);
        return {
          success: false,
          message: 'Erreur lors de la v√©rification des qu√™tes existantes',
          error: checkError.message
        };
      }
      
      console.log('üìã Existing quests in database:', existingQuests?.length || 0);
      console.log('üìù Existing quest titles:', existingQuests?.map(q => q.title) || []);
      
      const existingTitles = new Set(existingQuests?.map(q => q.title.trim().toLowerCase()) || []);
      console.log('üîç Normalized existing titles:', Array.from(existingTitles));
      
      // Filter new quests more carefully
      const newQuests = historicalQuests.filter(quest => {
        const normalizedTitle = quest.title.trim().toLowerCase();
        const isNew = !existingTitles.has(normalizedTitle);
        console.log(`üîé Checking "${quest.title}" (normalized: "${normalizedTitle}") - Is new: ${isNew}`);
        return isNew;
      });
      
      console.log('üÜï New quests to add:', newQuests.length);
      console.log('üìú New quest titles:', newQuests.map(q => q.title));
      
      if (!forceReload && newQuests.length === 0) {
        console.log('‚ÑπÔ∏è All historical quests already exist');
        return { 
          success: true, 
          message: `Toutes les qu√™tes (${existingQuests?.length || 0}) sont d√©j√† pr√©sentes. Utilisez l'actualisation forc√©e si n√©cessaire.`,
          data: existingQuests
        };
      }
      
      const questsToProcess = forceReload ? historicalQuests : newQuests;
      console.log('‚öôÔ∏è Processing quests:', questsToProcess.length);
      
      // Convert quests to database format
      const questsForDb = questsToProcess.map(quest => {
        console.log(`üîß Converting quest: "${quest.title}"`);
        return {
          title: quest.title,
          description: quest.description,
          story_background: quest.story_background,
          quest_type: quest.quest_type,
          difficulty_level: quest.difficulty_level,
          max_participants: quest.max_participants,
          min_participants: quest.min_participants,
          status: quest.status,
          start_date: quest.start_date,
          end_date: quest.end_date,
          reward_points: quest.reward_points,
          special_rewards: quest.special_rewards as any,
          clues: quest.clues as any,
          target_symbols: quest.target_symbols,
          translations: quest.translations as any
        };
      });
      
      console.log(`üíæ Attempting to insert ${questsForDb.length} quests`);
      
      // Insert new quests
      const { data, error } = await supabase
        .from('treasure_quests')
        .insert(questsForDb)
        .select();
      
      if (error) {
        console.error('‚ùå Error inserting quests:', error);
        return {
          success: false,
          message: 'Erreur lors de l\'insertion des qu√™tes',
          error: error.message
        };
      }
      
      console.log(`‚úÖ Successfully inserted ${questsToProcess.length} historical quests`);
      return { 
        success: true, 
        message: forceReload 
          ? `${questsToProcess.length} qu√™te(s) recharg√©e(s) avec succ√®s`
          : `${questsToProcess.length} nouvelle(s) qu√™te(s) historique(s) ajout√©e(s) avec succ√®s`,
        data: data
      };
      
    } catch (error) {
      console.error('üí• Unexpected error populating historical quests:', error);
      return { 
        success: false, 
        message: 'Erreur inattendue lors du chargement des qu√™tes',
        error: error instanceof Error ? error.message : 'Erreur inconnue'
      };
    }
  },

  async getHistoricalQuestByType(questType: string): Promise<ServiceResponse> {
    try {
      const { data, error } = await supabase
        .from('treasure_quests')
        .select('*')
        .eq('quest_type', questType)
        .eq('status', 'active')
        .order('created_at', { ascending: false });
      
      if (error) {
        return {
          success: false,
          message: 'Erreur lors de la r√©cup√©ration de la qu√™te',
          error: error.message
        };
      }

      return { 
        success: true, 
        message: 'Qu√™te r√©cup√©r√©e avec succ√®s',
        data: data
      };
      
    } catch (error) {
      return { 
        success: false, 
        message: 'Erreur inattendue lors de la r√©cup√©ration',
        error: error instanceof Error ? error.message : 'Erreur inconnue'
      };
    }
  },

  async updateQuestProgress(questId: string, userId: string, clueIndex: number, discoveryData: any): Promise<ServiceResponse> {
    try {
      const { data, error } = await supabase
        .from('quest_progress')
        .insert({
          quest_id: questId,
          user_id: userId,
          clue_index: clueIndex,
          discovery_data: discoveryData,
          validated: false,
          points_earned: 0
        })
        .select()
        .single();
      
      if (error) {
        return {
          success: false,
          message: 'Erreur lors de la mise √† jour de la progression',
          error: error.message
        };
      }

      return { 
        success: true, 
        message: 'Progression mise √† jour avec succ√®s',
        data: data
      };
      
    } catch (error) {
      return { 
        success: false, 
        message: 'Erreur inattendue lors de la mise √† jour',
        error: error instanceof Error ? error.message : 'Erreur inconnue'
      };
    }
  }
};
