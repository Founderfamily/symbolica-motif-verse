import { useMutation } from '@tanstack/react-query';
import { useCallback, useRef, useState } from 'react';
import { useToast } from '@/components/ui/use-toast';
import { supabase } from '@/integrations/supabase/client';

export const useProactiveAI = (questId: string) => {
  const { toast } = useToast();
  
  // Protection contre double-clic et √©tats de verrous
  const actionLocks = useRef({
    investigation: false,
    sources: false,
    theories: false,
    connections: false,
  });
  
  // R√©f√©rences pour le debouncing
  const debounceTimers = useRef<{ [key: string]: NodeJS.Timeout }>({});
  const lastActionTime = useRef<{ [key: string]: number }>({});
  
  // Fonction de debouncing optimis√©e
  const debounceAction = useCallback((actionKey: string, action: () => Promise<any>, delay = 200) => {
    const now = Date.now();
    const lastTime = lastActionTime.current[actionKey] || 0;
    
    // Si la derni√®re action √©tait il y a moins de 200ms, ignorer
    if (now - lastTime < delay) {
      console.log(`‚è±Ô∏è Action ${actionKey} trop rapide - derni√®re: ${now - lastTime}ms`);
      return Promise.resolve();
    }
    
    // Clear le timer pr√©c√©dent s'il existe
    if (debounceTimers.current[actionKey]) {
      clearTimeout(debounceTimers.current[actionKey]);
    }
    
    // Ex√©cuter imm√©diatement
    console.log(`üöÄ Ex√©cution action ${actionKey}`);
    lastActionTime.current[actionKey] = now;
    return action();
  }, []);

  // Fonction de r√©cup√©ration d'erreur
  const handleError = useCallback((error: Error, context: string) => {
    console.error(`Erreur ${context}:`, error);
    toast({
      title: "Erreur",
      description: `${context}: ${error.message}`,
      variant: "destructive",
    });
  }, [toast]);

  // Mutation pour investigation proactive compl√®te
  const startProactiveInvestigationMutation = useMutation({
    mutationFn: async ({ questId, questData }: { questId: string, questData?: any }) => {
      console.log('üöÄ Starting proactive investigation for quest:', questId);
      
      // R√©cup√©rer l'ID utilisateur actuel
      const { data: { user } } = await supabase.auth.getUser();
      
      if (!user?.id) {
        console.log('‚ö†Ô∏è Utilisateur non authentifi√© - investigation sans sauvegarde');
      }
      
      const { data, error } = await supabase.functions.invoke('ai-investigation-v2', {
        body: { 
          action: 'full_investigation',
          questId,
          questData,
          userId: user?.id || 'anonymous',
          timestamp: new Date().toISOString()
        }
      });

      if (error) {
        console.error('Edge function error:', error);
        throw new Error(error.message || 'Erreur lors de l\'investigation proactive');
      }

      if (!data || data.status !== 'success') {
        throw new Error(data?.message || 'Erreur lors de l\'investigation proactive');
      }

      return data;
    },
    onSuccess: (data) => {
      console.log('‚úÖ Investigation data received:', data);
      
      if (data.auth_required) {
        toast({
          title: "‚ö†Ô∏è Investigation IA g√©n√©r√©e",
          description: "R√©sultat g√©n√©r√© mais non sauvegard√©. Connectez-vous pour sauvegarder.",
          variant: "default",
        });
      } else if (data.saved) {
        toast({
          title: "üîç Investigation IA termin√©e",
          description: "L'analyse compl√®te a √©t√© g√©n√©r√©e et sauvegard√©e avec succ√®s",
        });
      } else {
        toast({
          title: "üîç Investigation IA g√©n√©r√©e",
          description: data.save_error ? `Erreur de sauvegarde: ${data.save_error}` : "R√©sultat g√©n√©r√©",
          variant: data.save_error ? "destructive" : "default",
        });
      }
    },
    onError: (error) => {
      handleError(error as Error, 'Investigation proactive');
    },
  });

  // Mutation pour recherche de sources historiques
  const searchHistoricalSourcesMutation = useMutation({
    mutationFn: async ({ questId, questData }: { questId: string, questData?: any }) => {
      console.log('üìö Searching historical sources for quest:', questId);
      
      const { data, error } = await supabase.functions.invoke('ai-investigation-v2', {
        body: { 
          action: 'search_historical_sources',
          questId,
          questData,
          timestamp: new Date().toISOString()
        }
      });

      if (error) {
        console.error('Edge function error:', error);
        throw new Error(error.message || 'Erreur lors de la recherche de sources');
      }

      if (!data || data.status !== 'success') {
        throw new Error(data?.message || 'Erreur lors de la recherche de sources');
      }

      return data;
    },
    onSuccess: (data) => {
      toast({
        title: "üìö Sources historiques trouv√©es",
        description: "L'IA a identifi√© des sources pertinentes",
      });
    },
    onError: (error) => {
      handleError(error as Error, 'Recherche de sources');
    },
  });

  // Mutation pour g√©n√©ration de th√©ories
  const generateTheoriesMutation = useMutation({
    mutationFn: async ({ questId, questData, evidenceData }: { questId: string, questData?: any, evidenceData?: any[] }) => {
      console.log('üí° Generating theories for quest:', questId);
      
      const { data, error } = await supabase.functions.invoke('ai-investigation-v2', {
        body: { 
          action: 'generate_theories',
          questId,
          questData,
          evidenceData,
          timestamp: new Date().toISOString()
        }
      });

      if (error) {
        console.error('Edge function error:', error);
        throw new Error(error.message || 'Erreur lors de la g√©n√©ration de th√©ories');
      }

      if (!data || data.status !== 'success') {
        throw new Error(data?.message || 'Erreur lors de la g√©n√©ration de th√©ories');
      }

      return data;
    },
    onSuccess: (data) => {
      toast({
        title: "üí° Th√©ories g√©n√©r√©es",
        description: "L'IA a √©labor√© des th√©ories d'investigation",
      });
    },
    onError: (error) => {
      handleError(error as Error, 'G√©n√©ration de th√©ories');
    },
  });

  // Mutation pour analyse des connexions
  const analyzeConnectionsMutation = useMutation({
    mutationFn: async ({ questId, questData, evidenceData, theoriesData }: { questId: string, questData?: any, evidenceData?: any[], theoriesData?: any[] }) => {
      console.log('üîó Analyzing connections for quest:', questId);
      
      const { data, error } = await supabase.functions.invoke('ai-investigation-v2', {
        body: { 
          action: 'analyze_connections',
          questId,
          questData,
          evidenceData,
          theoriesData,
          timestamp: new Date().toISOString()
        }
      });

      if (error) {
        console.error('Edge function error:', error);
        throw new Error(error.message || 'Erreur lors de l\'analyse des connexions');
      }

      if (!data || data.status !== 'success') {
        throw new Error(data?.message || 'Erreur lors de l\'analyse des connexions');
      }

      return data;
    },
    onSuccess: (data) => {
      toast({
        title: "üîó Analyse des connexions termin√©e",
        description: "L'IA a analys√© les relations entre les √©l√©ments",
      });
    },
    onError: (error) => {
      handleError(error as Error, 'Analyse des connexions');
    },
  });

  // Actions prot√©g√©es avec debouncing
  const protectedActions = {
    startProactiveInvestigation: (params: { questId: string, questData?: any }) => debounceAction('investigation', () => {
      if (actionLocks.current.investigation) return Promise.resolve();
      actionLocks.current.investigation = true;
      setTimeout(() => actionLocks.current.investigation = false, 30000);
      return startProactiveInvestigationMutation.mutateAsync(params);
    }),

    searchHistoricalSources: (params: { questId: string, questData?: any }) => debounceAction('sources', () => {
      if (actionLocks.current.sources) return Promise.resolve();
      actionLocks.current.sources = true;
      setTimeout(() => actionLocks.current.sources = false, 20000);
      return searchHistoricalSourcesMutation.mutateAsync(params);
    }),

    generateTheories: (params: { questId: string, questData?: any, evidenceData?: any[] }) => debounceAction('theories', () => {
      if (actionLocks.current.theories) return Promise.resolve();
      actionLocks.current.theories = true;
      setTimeout(() => actionLocks.current.theories = false, 25000);
      return generateTheoriesMutation.mutateAsync(params);
    }),

    analyzeConnections: (params: { questId: string, questData?: any, evidenceData?: any[], theoriesData?: any[] }) => debounceAction('connections', () => {
      if (actionLocks.current.connections) return Promise.resolve();
      actionLocks.current.connections = true;
      setTimeout(() => actionLocks.current.connections = false, 20000);
      return analyzeConnectionsMutation.mutateAsync(params);
    }),
  };

  return {
    // Actions avec param√®tres
    ...protectedActions,
    
    // √âtats de chargement
    isInvestigating: startProactiveInvestigationMutation.isPending,
    isSearchingSources: searchHistoricalSourcesMutation.isPending,
    isGeneratingTheories: generateTheoriesMutation.isPending,
    isAnalyzingConnections: analyzeConnectionsMutation.isPending,
    
    // Fonction de r√©cup√©ration d'interface
    resetInterface: useCallback(() => {
      console.log('üîÑ Reset interface IA');
      actionLocks.current = {
        investigation: false,
        sources: false,
        theories: false,
        connections: false,
      };
      
      // Clear tous les timers
      Object.values(debounceTimers.current).forEach(timer => clearTimeout(timer));
      debounceTimers.current = {};
      lastActionTime.current = {};
      
      toast({
        title: "Interface r√©initialis√©e",
        description: "L'interface IA a √©t√© remise √† z√©ro",
      });
    }, [toast]),
  };
};